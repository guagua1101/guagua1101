
import numpy as np
import pandas as pd
from datetime import timedelta
from dateutil.relativedelta import relativedelta
from datetime import date, timedelta
import matplotlib.pyplot as plt
import seaborn as sns
import psycopg2
import tejapi
import time 
import datetime   
      #金要#
tejapi.ApiConfig.api_key="qsZobNV266GallOhcHev64GMP5B1Gx"###yourkey
start ="2021-05-30"
end  ="2021-6-1"
data = tejapi.get('TWN/AFACTO1D',
                  mdate={'gt':start,'lt':end},
                                paginate=True,
                      chinese_column_name=True
                  )
columns= data.columns


db_global = psycopg2.connect(dbname="global", user="2021112901", password="tej12345678", host="pg-ndb-global.tejwin.com", 
                          port="5432")
db_twnprc = psycopg2.connect(dbname="twn_prc", user="2021112901", password="tej12345678", host="pg-ndb-twnprc.tejwin.com", 
                          port="5432")
db_fin = psycopg2.connect(dbname="twn", user="2021112901", password="tej12345678", host="pg-ndb-twn.tejwin.com",
                          port="5432")
## 抓出今天日期
today=datetime.date.today()
## 抓出過去一年日期
lastyear=today-relativedelta(years=1)
###抓取交易時間給予日周月季年 以此做為基準 抓出日期
def getdate(time):
    
    datetime = pd.read_sql_query(
    '''
    select zdate, roi
    from prc.index_proi 
    JOIN stk.attr_event on stk.attr_event.tej_fp_id=index_proi.tej_fp_id
    Where zdate >= '%s'  and stk.attr_event.STK_ID='Y9997'  
    '''%(time),    con=db_twnprc)
    datetime["zdate1"]=pd.to_datetime(datetime["zdate"]) 
    datetime["month"]= datetime["zdate1"].dt.month
    datetime["year"]= datetime['zdate1'].dt.year
    datetime["week"]= datetime['zdate1'].dt.isocalendar().week
    datetime["season"]= datetime['zdate1'].dt.quarter

    datetime["day"]= datetime['zdate1'].dt.day
 
    return datetime
#### 抓取五月最後一天
def getmayday(today):
    lastyear=today-relativedelta(years=1)

    range_time= getdate(lastyear)

    getstd =range_time.copy()
    stdtime=[]
    
    for i in range(1,len(getstd)):
        
        if getstd['month'][i]-getstd['month'][i-1] == 1:
            if getstd['month'][i-1] == 5:

                stdtime.append(getstd.iloc[i-1])
    a=stdtime[0]['zdate']
    
    
    return a
## 判斷周底日期 抓出後輸入 function 求出 
def getendweek(today):
    weektime=[]
    range_time= today-relativedelta(weeks=1)
    range_time= getdate(range_time)

    getstd =range_time.copy()
    for i in range(1,len(getstd)):
        
        if getstd['week'][i]-getstd['week'][i-1] == 1:
                weektime.append(getstd.iloc[i-1])      
        if getstd['week'][i]-getstd['week'][i-1] == -51:
                weektime.append(getstd.iloc[i-1])
    return weektime[0]['zdate']
 
### 判斷月底日期
def getendmonth(today):
    monthtime=[]
    range_time= today-relativedelta(months=1)
    range_time= getdate(range_time)

    getstd =range_time.copy()
    for i in range(1,len(getstd)):
        
        if getstd['month'][i]-getstd['month'][i-1] == 1:
                monthtime.append(getstd.iloc[i-1])      
        if getstd['month'][i]-getstd['month'][i-1] == -11:
                monthtime.append(getstd.iloc[i-1])
    return monthtime[0]['zdate']
##季底
def getendquarter(today):
    quartertime=[]
    range_time= today-relativedelta(months=3)
    range_time= getdate(range_time)

    getstd =range_time.copy()
    for i in range(1,len(getstd)):
        
        if getstd['season'][i]-getstd['season'][i-1] == 1:
                quartertime.append(getstd.iloc[i-1])      
        if getstd['season'][i]-getstd['season'][i-1] == -3:
                quartertime.append(getstd.iloc[i-1])
    return quartertime[0]['zdate']

##年底
def getendyear(today):
    yeartime=[]
    range_time= today-relativedelta(years=1)
    range_time= getdate(range_time)

    getstd =range_time.copy()
    for i in range(1,len(getstd)):
        
        if getstd['year'][i]-getstd['year'][i-1] == 1:
                yeartime.append(getstd.iloc[i-1])      
        # if getstd['year'][i]-getstd['year'][i-1] == :
        #         weektime.append(getstd.iloc[i-1])
    return yeartime[0]['zdate']
 
   
weektime =getendweek(today)
monthtime = getendmonth(today)    
seasontime = getendquarter(today)
yeartime = getendyear(today)   
timeindex= getmayday(today)
#### 換組輸入 有些資料 2022 年 5月前是使用 2021年財報資料  
if  today.month < 6 :
    famayear=today.year -1 
if  today.month >  5 :
    famayear=today.year  

year=today.year
          
  


######選取金融股
def basic():
    basic = pd.read_sql_query(
                    '''
                    select stk_id
                    from index.event_idxsample_m 
                    where idx_id = 'M2800' and event_idxsample_m.mkt = 'TWSE'
                    ''', 
                    con=db_twnprc)
    M2800 = list(basic['stk_id'].unique())
    return M2800
M2800=basic()
###把金融股篩掉

def non_fin(df):
    df = df.reset_index().drop(columns = 'index')

    for i in M2800:
        index_no = df[df['stk_id'] == i].index
        df.drop(index_no, inplace =True)
        
    return df



def Financialstatements(start,end):
    invest_factor = pd.DataFrame()
    for i in range(start, end+1):
    
        code = '''
        SELECT fin.fin_finmini.tej_comp_id, fin_end_yymm, acc_val_k, semester ,stk_id,fin_type,fin_aq
        FROM fin.fin_finmini  JOIN stk.attr_event on stk.attr_event.tej_comp_id=fin.fin_finmini.tej_comp_id
        WHERE stk.attr_event.STK_TYPE='1'   and ( fin_type='M' or  fin_aq='A')and acc_code='0010A' and fin_end_yymm >= '%s1001' and fin_end_yymm < '%s0601'
        ''' % (i-1, i)
  
#### fin_type='M' 為主 如果沒有就補 A
        invest = pd.read_sql_query(code, con=db_fin)
    
        invest = invest.set_index('fin_end_yymm')
        invest = invest.sort_values(by = ['stk_id', 'semester'])
        
        mode = {}
        for j in list(invest['stk_id'].unique()):
            each = invest[invest['stk_id'] == j].sort_index()
            
            if len(each) == 2:
                value = each['acc_val_k'].pct_change().iloc[1]
                mode.setdefault(j, value) 
            if len(each) == 3:
                try:
                    each=each[each["fin_type"]=='M']
                    value = each['acc_val_k'].pct_change().iloc[1]
                    mode.setdefault(j, value)
                except IndexError :
                    each = invest[invest['stk_id'] == j]
                    each=each[each["fin_type"]=='A']
                    value = each['acc_val_k'].pct_change().iloc[1]
                    mode.setdefault(j, value)
            if len(each) == 4:
                each=each[each["fin_type"]=='M']
                value = each['acc_val_k'].pct_change().iloc[1]
                mode.setdefault(j, value)
        final = pd.DataFrame(mode.values(), index = mode.keys(), columns = ["inv"+str(i)])
        final = final.sort_values(by = final.columns[0], ascending = False)
        invest_factor = pd.concat([invest_factor, final], axis = 1)
        
    profit_factor = pd.DataFrame()
    for i in range(start, end+1):

        separate_season = pd.read_sql_query(
        '''
        
        SELECT  fin_end_yymm, m_acc_val_k, semester ,stk_id ,fin_type,fin_aq
        FROM fin.fin_finmini JOIN stk.attr_event on stk.attr_event.tej_comp_id=fin.fin_finmini.tej_comp_id
        WHERE stk.attr_event.STK_TYPE='1'  and (fin_type='M' or  fin_aq='A') and acc_code='3900' and fin_end_yymm >= '%s-06-01' and fin_end_yymm <= '%s-03-01'
        '''%(i-1, i), 
        con=db_fin)
        profit = separate_season.set_index('fin_end_yymm')
        profit = profit.sort_values(by = ['stk_id', 'semester'])
    
        
        equity = pd.read_sql_query(
        '''
        SELECT   acc_val_k ,stk_id ,fin_type,fin_aq
        FROM fin.fin_finmini  JOIN stk.attr_event on stk.attr_event.tej_comp_id=fin.fin_finmini.tej_comp_id
        WHERE stk.attr_event.STK_TYPE='1'  and (fin_type='M' or fin_aq='A') and acc_code='2000' and fin_end_yymm = '%s-03-01'
        '''%(i), 
        con=db_fin)
        mode=[]
        equity = equity.rename(columns = {'acc_val_k':'前期權益總數'})
        for j in list(equity['stk_id'].unique()):
            each = equity[equity['stk_id'] == j]
            if len(each) == 1:
                value = each[['前期權益總數','stk_id']]
                mode.append(value)
            if len(each) == 2:
                each=each[each["fin_type"]=='M']
                value = each[['前期權益總數','stk_id']]
                mode.append(value)
        mode=pd.concat(mode)
    
    
        mode1 = {}
    
        for j in list(separate_season['stk_id'].unique()):
            each = separate_season[separate_season['stk_id'] == j]
            if len(each) == 4:
                value = each['m_acc_val_k'].sum()
                mode1.setdefault(j, value) 
            if len(each) == 5:
                each=each[each["fin_type"]=='M']
                value = each['m_acc_val_k'].sum()
                mode1.setdefault(j, value) 
            if len(each) == 6:
                each=each[each["fin_type"]=='M']
                value = each['m_acc_val_k'].sum()
                mode1.setdefault(j, value) 
            if len(each) == 7:
                each=each[each["fin_type"]=='M']
                value = each['m_acc_val_k'].sum()
                mode1.setdefault(j, value) 
            if len(each) == 8:
                each=each[each["fin_type"]=='M']
                value = each['m_acc_val_k'].sum()
                mode1.setdefault(j, value)

        profit_pretax = pd.DataFrame(mode1.values(), index = mode1.keys(), columns = ['累計近四季稅前淨利'])
        profit_pretax = profit_pretax.sort_values(by = '累計近四季稅前淨利', ascending = False)
        
        
        profit_pretax = profit_pretax.reset_index().rename(columns = {'index':'stk_id'})
        profit_final = pd.merge(profit_pretax, mode, how='inner', on=['stk_id'])
        profit_final["eps"+str(i)] = profit_final['累計近四季稅前淨利'] / profit_final['前期權益總數']
        profit_final = profit_final.drop(columns = ['累計近四季稅前淨利','前期權益總數'])
        profit_final = profit_final.set_index('stk_id')
        profit_factor = pd.concat([profit_factor, profit_final], axis = 1)
    return invest_factor , profit_factor



# currentDateTime = datetime.datetime.now()
# date = currentDateTime.date()
# year = date.strftime("%Y")
# print(f"Current Year -> {year}")



def long_term_revert(start, end):
    ### PAST-12
    trade_date_12 = pd.read_sql_query( '''
                                    select zdate
                                    from stk.attr_stdodr 
                                    where tradeday_cno !=0 and zdate >= '%s' and zdate <= '%s'
                                    '''%(date(int(str(start)[0:4]), int(str(start)[5:6]), int(str(start)[7:])) - relativedelta(months=12), end), 
                                    con=db_twnprc)
    trade_date_12 = trade_date_12.sort_values(by = 'zdate', ascending = True).reset_index().drop(columns = 'index')

    target_date_12 = trade_date_12.iloc[0]
    for i in range(1, len(trade_date_12)):
        if trade_date_12['zdate'].iloc[i].month != trade_date_12['zdate'].iloc[i-1].month:
            target_date_12 = pd.concat([target_date_12, trade_date_12.iloc[i]], axis = 0)
    target_date_12 = target_date_12.reset_index().drop(columns = ['index']).rename(columns = {0:'每月交易首日'})
    
    
    roi12 = pd.DataFrame()

    for i in range(12, len(target_date_12)):
        past12 = pd.read_sql_query(
            '''
            select stk_id, zdate,  roi , b.mkt
            from prc.stock_proip as a JOIN stk.attr_event as b  on a.tej_fp_id=b.tej_fp_id
            Where b.STK_TYPE='1' and a.zdate = '%s' and a.prdid ='YP0001'
            '''%(target_date_12.iloc[i-12,0]), 
            con=db_twnprc)

        past12 = past12.rename(columns= {'roi':'12個月前年報酬率', 'zdate':'日期', 'stk_id':'證券代碼'})
        roi12 = pd.concat([roi12, past12], axis = 0)
        
    final_12 = pd.DataFrame()
    for i in range(len(list(roi12['日期'].unique()))):
        individual_date = roi12[roi12['日期'] == list(roi12['日期'].unique())[i]]
        individual_date['日期'] = target_date_12['每月交易首日'].iloc[i+12]
        final_12 = pd.concat([final_12, individual_date], axis = 0)

    
    
    ### PAST-24
    trade_date_24 = pd.read_sql_query( '''
                                    select zdate
                                    from stk.attr_stdodr 
                                    where tradeday_cno !=0 and zdate >= '%s' and zdate <= '%s'
                                    '''%(date(int(str(start)[0:4]), int(str(start)[5:6]), int(str(start)[7:])) - relativedelta(months=24), end), 
                                    con=db_twnprc)
    trade_date_24 = trade_date_24.sort_values(by = 'zdate', ascending = True).reset_index().drop(columns = 'index')

    target_date_24 = trade_date_24.iloc[0]
    for i in range(1, len(trade_date_24)):
        if trade_date_24['zdate'].iloc[i].month != trade_date_24['zdate'].iloc[i-1].month:
            target_date_24 = pd.concat([target_date_24, trade_date_24.iloc[i]], axis = 0)
    target_date_24 = target_date_24.reset_index().drop(columns = ['index']).rename(columns = {0:'每月交易首日'})
    
    
    roi24 = pd.DataFrame()

    for i in range(24, len(target_date_24)):
        past24 = pd.read_sql_query(
            '''
            select stk_id, zdate,  roi
            from prc.stock_proip JOIN stk.attr_event on stk.attr_event.tej_fp_id=stock_proip.tej_fp_id
            Where stk.attr_event.STK_TYPE='1' and zdate = '%s' and prdid ='YP0001'
            '''%(target_date_24.iloc[i-24,0]), 
            con=db_twnprc)

        past24 = past24.rename(columns= {'roi':'24個月前年報酬率', 'zdate':'日期', 'stk_id':'證券代碼'})
        roi24 = pd.concat([roi24, past24], axis = 0)
        
    final_24 = pd.DataFrame()
    for i in range(len(list(roi24['日期'].unique()))):
        individual_date = roi24[roi24['日期'] == list(roi24['日期'].unique())[i]]
        individual_date['日期'] = target_date_24['每月交易首日'].iloc[i+24]
        final_24 = pd.concat([final_24, individual_date], axis = 0)
    
    ### PAST-36
    trade_date_36 = pd.read_sql_query( '''
                                    select zdate
                                    from stk.attr_stdodr 
                                    where tradeday_cno !=0 and zdate >= '%s' and zdate <= '%s'
                                    '''%(date(int(str(start)[0:4]), int(str(start)[5:6]), int(str(start)[7:])) - relativedelta(months=36), end), 
                                    con=db_twnprc)
    trade_date_36 = trade_date_36.sort_values(by = 'zdate', ascending = True).reset_index().drop(columns = 'index')

    target_date_36 = trade_date_36.iloc[0]
    for i in range(1, len(trade_date_36)):
        if trade_date_36['zdate'].iloc[i].month != trade_date_36['zdate'].iloc[i-1].month:
            target_date_36 = pd.concat([target_date_36, trade_date_36.iloc[i]], axis = 0)
    target_date_36 = target_date_36.reset_index().drop(columns = ['index']).rename(columns = {0:'每月交易首日'})
    
    
    roi36 = pd.DataFrame()

    for i in range(36, len(target_date_36)):
        past36 = pd.read_sql_query(
            '''
            select stk_id, zdate,  roi
            from prc.stock_proip JOIN stk.attr_event on stk.attr_event.tej_fp_id=stock_proip.tej_fp_id
            Where stk.attr_event.STK_TYPE='1' and zdate = '%s' and prdid ='YP0001'
            '''%(target_date_36.iloc[i-36,0]), 
            con=db_twnprc)

        past36 = past36.rename(columns= {'roi':'36個月前年報酬率', 'zdate':'日期', 'stk_id':'證券代碼'})
        roi36 = pd.concat([roi36, past36], axis = 0)
        
    final_36 = pd.DataFrame()
    for i in range(len(list(roi36['日期'].unique()))):
        individual_date = roi36[roi36['日期'] == list(roi36['日期'].unique())[i]]
        individual_date['日期'] = target_date_36['每月交易首日'].iloc[i+36]
        final_36 = pd.concat([final_36, individual_date], axis = 0)
        
    
    # FINAL
    qusai_final = pd.merge(final_12, final_24, how='inner', on=['證券代碼','日期'])
    final = pd.merge(qusai_final, final_36, how='inner', on=['證券代碼','日期'])
    
    for i in [12,24,36]:
        final[str(i)+'個月前年報酬率'] = (0.01*final[str(i)+'個月前年報酬率'])+1
    
    final['13個月前近3年報酬'] = ((final['12個月前年報酬率'] * final['24個月前年報酬率'] * final['36個月前年報酬率']) - 1) * 100

    return final


def Momentum(start, end):
  
    trade_date = pd.read_sql_query( '''
                                    select zdate
                                    from stk.attr_stdodr 
                                    where tradeday_cno !=0 and zdate >= '%s' and zdate <= '%s'
                                    '''%(date(int(str(start)[0:4]), int(str(start)[5:6]), int(str(start)[7:])) - relativedelta(months=2), end), 
                                    con=db_twnprc)
    trade_date = trade_date.sort_values(by = 'zdate', ascending = True).reset_index().drop(columns = 'index')

    target_date = trade_date.iloc[0]
    for i in range(1, len(trade_date)):
        if trade_date['zdate'].iloc[i].month != trade_date['zdate'].iloc[i-1].month:
            target_date = pd.concat([target_date, trade_date.iloc[i]], axis = 0)
    target_date = target_date.reset_index().drop(columns = ['index']).rename(columns = {0:'每月交易首日'})
    
    
    momentum = pd.DataFrame()

    for i in range(2, len(target_date)):
        past2 = pd.read_sql_query(
            '''
            select stk_id, zdate,  roi ,b.mkt
            from prc.stock_proip as a  JOIN stk.attr_event as b on a.tej_fp_id=b.tej_fp_id
            Where b.STK_TYPE='1' and a.zdate = '%s' and a.prdid ='YP0001'
            '''%(target_date.iloc[i-2,0]), 
            con=db_twnprc)
    
        past2 = past2.rename(columns= {'roi':'2個月前年報酬率', 'zdate':'日期', 'stk_id':'證券代碼'})
        momentum = pd.concat([momentum, past2], axis = 0)
        
    final = pd.DataFrame()
    for i in range(len(list(momentum['日期'].unique()))):
        individual_date = momentum[momentum['日期'] == list(momentum['日期'].unique())[i]]
        individual_date['日期'] = target_date['每月交易首日'].iloc[i+2]
        final = pd.concat([final, individual_date], axis = 0)

    return final



def getMomentum(start1,end1):
    
    mom = Momentum(start1,end1)
    mom.set_index("證券代碼",inplace=True)
    mom['日期']=pd.to_datetime(mom['日期'])

    mom["month"]= mom["日期"].dt.month
    mom["year"]= mom['日期'].dt.year
    
        
    sh_roi = pd.read_sql_query(
    '''
    select b.stk_id, a.zyymm, a.roi , b.mkt 
    from prc.stock_proimm as a JOIN stk.attr_event as b  on b.tej_fp_id=a.tej_fp_id
    Where b.STK_TYPE='1' and zyymm >= '%s'
    '''%(date(int(str(start1)[0:4]), int(str(start1)[5:6]), int(str(start1)[7:]))) , 
    con=db_twnprc)
    
    sh_roi = sh_roi.rename(columns= {'roi':'短期反轉%', 'zyymm':'日期', 'stk_id':'證券代碼'})
    sh_roi = sh_roi.sort_values(by = '日期')
    sh_roi.set_index("證券代碼",inplace=True)
    sh_roi['日期']=pd.to_datetime(sh_roi['日期'])
    
    sh_roi["month"]= sh_roi["日期"].dt.month
    sh_roi["year"]= sh_roi['日期'].dt.year
    
    long=long_term_revert(start1,end1)
    long.set_index("證券代碼",inplace=True)
    long['日期']=pd.to_datetime(long['日期'])

    long["month"]= long["日期"].dt.month
    long["year"]= long['日期'].dt.year
    return sh_roi , mom , long



def rf(start2):
    rf = pd.read_sql_query(
    '''
    select zdate, fixed_rate
    from rate.rate_interest_twd
    Where tej_comp_id = 26181 and RATE_ID='TD01Y' and AMT_ID='00'
    and zdate >= '%s' 
    '''%(start2), 
    con=db_global)
    
    rf = rf.rename(columns= {'fixed_rate':'一年定存', 'zdate':'日期'})
    return rf

################################################ˇˇ

def quarter(start):
    
    trade_date = pd.read_sql_query( '''
    select zdate
    from stk.attr_stdodr
    where tradeday_cno !=0 and zdate >= '%s' 
    '''%(start),
    con=db_twnprc)
    trade_date = trade_date.sort_values(by = 'zdate', ascending = True).reset_index().drop(columns = 'index')
    
    
    
    target_date = pd.DataFrame()
    for i in range(0, len(trade_date)-1):
        if trade_date['zdate'].iloc[i].month != trade_date['zdate'].iloc[i+1].month and str(trade_date['zdate'].iloc[i].month) in ['3','6','9','12']:
            target_date = pd.concat([target_date, trade_date.iloc[i]], axis = 0)
    if trade_date['zdate'].iloc[-1].month in (3,6,9,12) and trade_date['zdate'].iloc[-1].day in range(24,32):
        target_date = pd.concat([target_date, trade_date.iloc[-1]], axis = 0)
    target_date = target_date.reset_index().drop(columns = ['index']).rename(columns = {0:'每季交易末日'})

    final = pd.DataFrame()
    
    
    
    for i in range(0, len(target_date)):
    
        retQuarter = pd.read_sql_query(
        '''
        select stk_id, a.zdate, a.qf0001 
        from prc.stock_proip_across as a  JOIN stk.attr_event as b on b.tej_fp_id=a.tej_fp_id
        Where  b.stk_type = '1' and  a.zdate = '%s'
        '''%(target_date.iloc[i,0]),
        con=db_twnprc)
        
        retQuarter = retQuarter.rename(columns = {'zdate':'日期', 'qf0001':'本季累積報酬'})
        final = pd.concat([final, retQuarter], axis = 0)
        
    final['LN季報酬%'] = np.log(final['本季累積報酬']*0.01+1) * 100
    return final

def getfamastd(time):
    dataframe = pd.read_sql_query(
    '''
    SELECT C.STK_ID,A.ZDATE,MKTCAP_K,ROI,D.PBR,C.MKT,B.ln_roi,D.tej_cdiv_yid,D.T2000, D.PEV , D.TEJ_PER2 ,D.sumoi_2

    FROM PRC.STOCK_PRC AS A LEFT JOIN PRC.STOCK_PROI AS B ON A.TEJ_FP_ID=B.TEJ_Fp_ID AND A.ZDATE=B.ZDATE
     
    LEFT JOIN STK.ATTR_EVENT AS C ON A.TEJ_FP_ID=C.TEJ_FP_ID

    LEFT JOIN  prc.stock_fd AS D ON A.TEJ_FP_ID=D.TEJ_FP_ID AND A.ZDATE=D.ZDATE

    Where A.zdate = '%s'  and C.stk_type= '1'
    ''' %(time) ,
    con=db_twnprc)
    dataframe['zdate']=pd.to_datetime(dataframe['zdate'])
    dataframe["month"]= dataframe["zdate"].dt.month
    dataframe["year"]= dataframe['zdate'].dt.year
    dataframe["week"]= dataframe['zdate'].dt.isocalendar().week
    dataframe["season"]= dataframe['zdate'].dt.quarter

    dataframe["day"]= dataframe['zdate'].dt.day
    dataframe.sort_values('zdate',inplace=True)
    dataframe.set_index("stk_id",inplace=True)
    
    return dataframe
def getdata(time):
####建立主表 
    dataframe = pd.read_sql_query(
    '''
    SELECT C.STK_ID,A.ZDATE,MKTCAP_K,ROI,D.PBR,C.MKT,B.ln_roi,D.tej_cdiv_yid,D.T2000, D.PEV , D.TEJ_PER2 ,D.sumoi_2

    FROM PRC.STOCK_PRC AS A LEFT JOIN PRC.STOCK_PROI AS B ON A.TEJ_FP_ID=B.TEJ_Fp_ID AND A.ZDATE=B.ZDATE
     
    LEFT JOIN STK.ATTR_EVENT AS C ON A.TEJ_FP_ID=C.TEJ_FP_ID

    LEFT JOIN  prc.stock_fd AS D ON A.TEJ_FP_ID=D.TEJ_FP_ID AND A.ZDATE=D.ZDATE

    Where A.zdate >= '%s'  and C.stk_type= '1'
    ''' %(time) ,
    con=db_twnprc)
    dataframe['zdate']=pd.to_datetime(dataframe['zdate'])
    dataframe["month"]= dataframe["zdate"].dt.month
    dataframe["year"]= dataframe['zdate'].dt.year
    dataframe["week"]= dataframe['zdate'].dt.isocalendar().week
    dataframe["season"]= dataframe['zdate'].dt.quarter

    dataframe["day"]= dataframe['zdate'].dt.day
    dataframe.sort_values('zdate',inplace=True)
    dataframe.set_index("stk_id",inplace=True)
    retmonth = pd.read_sql_query(
    '''
    select stk_id, zyymm, roi ,ln_roi
    from prc.stock_proimm JOIN stk.attr_event on stk.attr_event.tej_fp_id=stock_proimm.tej_fp_id
    Where  stk_type= '1'  and zyymm >= '%s' 
    ''' %(time),
    con=db_twnprc)
    
    retmonth.set_index("stk_id",inplace=True)
    retmonth['日期']=pd.to_datetime(retmonth['zyymm'])
    retmonth.rename(columns= {'roi':'本月累計報酬', 'ln_roi':'本月累計連續報酬率' },inplace=True)
    
    retmonth["month"]= retmonth["日期"].dt.month
    retmonth["year"]=retmonth['日期'].dt.year
       
    quarter_roi=quarter(time) 
    quarter_roi['日期']=pd.to_datetime(quarter_roi['日期'])
    quarter_roi["season"]=quarter_roi['日期'].dt.quarter
    quarter_roi["year"]=quarter_roi['日期'].dt.year

    df=dataframe.copy()
    # retyear.set_index("stk_id",inplace=True)
  

    df=df.merge(retmonth, how='left', on=['year','month','stk_id'])
    df=df.merge(quarter_roi, how='left', on=['year','season','stk_id'])
    df.set_index("stk_id",inplace=True)
    return df

def getweekyear(df,year):
    retweek = pd.read_sql_query(
    '''
    select b.stk_id , a.roi ,a.ln_roi , a.week_no, a.zyear
    from prc.stock_proiww as a JOIN stk.attr_event as b on b.tej_fp_id=a.tej_fp_id
    Where stk_type= '1' and zyear >= '%s'
    ''' %(year),
    con=db_twnprc)
    

    retweek.set_index("stk_id",inplace=True)
    retweek['日期']=pd.to_datetime(retweek['zyear'])
    retweek.rename(columns= {'roi':'本周累計報酬', 'ln_roi':'本周累計連續報酬率' ,'week_no': 'week'},inplace=True)
    
    retweek["year"]=retweek['日期'].dt.year
        
    retyear = pd.read_sql_query(
    '''
    select stk_id, zyear, roi ,ln_roi
    from prc.stock_proiyy JOIN stk.attr_event on stk.attr_event.tej_fp_id=stock_proiyy.tej_fp_id
    Where  stk_type= '1'  and zyear >= '%s'
    '''%(year),
    con=db_twnprc)
    retyear['日期']=pd.to_datetime(retyear['zyear'])
    retyear.rename(columns= {'roi':'本年累計報酬', 'ln_roi':'本年累計連續報酬率' },inplace=True)
    
    retyear["year"]=retyear['日期'].dt.year
    df=df.merge(retyear, how='left', on=['year','stk_id'])
    df=df.merge(retweek, how='left', on=['year','week','stk_id'])
   
    return df     


####################3

################### 將資料分成小大  主要是用市值來分 條件主要篩選 確保市值大於0 
def twosplit(df,condition,limit) :
    if limit :

        df.sort_values(by=condition,ascending=True,inplace=True)
        small=df[condition].iloc[:int(len(df)*0.5)]
        big=df[condition].iloc[int(len(df)*0.5):]
        small=small.index
        big=big.index
    else :
        df=df[df[condition]>0]
        df.sort_values(by=condition,ascending=True,inplace=True)
        small=df[condition].iloc[:int(len(df)*0.5)]
        big=df[condition].iloc[int(len(df)*0.5):]
        small=small.index
        big=big.index
    
    
    return small ,big 

def marketpro(data): 
    data.sort_values(by="mktcap_k",ascending=True,inplace=True)
    small=data.iloc[:int(len(data)*0.5)]
    big=data.iloc[int(len(data)*0.5):]
    small=small.index
    big=big.index
    return small ,big 

def splittwo(data,index):#用於二次切割 因原本已經分過一次組
    df=data.loc[index]
    df.sort_values(by="mktcap_k",ascending=True,inplace=True)
    small=df.iloc[:int(len(df)*0.5)]
    big=df.iloc[int(len(df)*0.5):]
    small=small.index
    big=big.index
    return small ,big 
#########
#只有分組時計算數字
def meanwithindex(data,index,mode,cal):
    if mode == "連續":

        df1=data.loc[index]    
        df1["市值加權"]     = df1['mktcap_k'].sum()
        df1["個股加權占比"] = df1['mktcap_k'] / df1["市值加權"]
        df1["個股投組報酬"] = df1["個股加權占比"]*df1["ln_roi"]
        out = df1["個股投組報酬"].sum()
    if mode == "不連續":
        df1=data.loc[index]    
        df1["市值加權"]     = df1['mktcap_k'].sum()
        df1["個股加權占比"] = df1['mktcap_k'] / df1["市值加權"]
        df1["個股投組報酬"] = df1["個股加權占比"]*df1["roi"]
        out = df1["個股投組報酬"].sum()
    if mode == "非日報酬":
        df1=data.loc[index]    
        df1["市值加權"]     = df1['mktcap_k'].sum()
        df1["個股加權占比"] = df1['mktcap_k'] / df1["市值加權"]
        df1["個股投組報酬"] = df1["個股加權占比"]*df1[cal]
        out = df1["個股投組報酬"].sum()
    return out.round(4)  

def mean(df,mode,cal):
    if mode == "連續":
        df["市值加權"]     = df['mktcap_k'].sum()
        df["個股加權占比"] = df['mktcap_k'] / df["市值加權"]
        df["個股投組報酬"] = df["個股加權占比"]*df["ln_roi"]
        out = df["個股投組報酬"].sum()
    if mode == '不連續':
        df["市值加權"]     = df['mktcap_k'].sum()
        df["個股加權占比"] = df['mktcap_k'] / df["市值加權"]
        df["個股投組報酬"] = df["個股加權占比"]*df["roi"]
        out = df["個股投組報酬"].sum()
    if mode == '非日報酬':
        df["市值加權"]     = df['mktcap_k'].sum()
        df["個股加權占比"] = df['mktcap_k'] / df["市值加權"]
        df["個股投組報酬"] = df["個股加權占比"]*df[cal]
        out = df["個股投組報酬"].sum()
    
    return out.round(4)

def twotimestwo(df,condition) : ####得到投組
    l,h=twosplit(df,condition,limit=False)### 分成 低跟高  # 淨值比 數字越低 稱為高
    sl,bl=splittwo(df,l)#低本益比小投組  # 低本益比大投組 #
    sh,bh=splittwo(df,h)#高本益比小投組  # 高本益比大投組 
    return sl,sh,bl,bh ###sh小高本益比 bh大高本益比 高本益比投組  sl bl 低本益比投組 

def twotimestwomean(df,sl ,sh, bl , bh , mode ,cal): ###小型溢酬
    sl = df.loc[sl]
    sh = df.loc[sh]
    bl = df.loc[bl]
    bh = df.loc[bh]
    sl = mean(sl,mode,cal) ## 小型 小condition
    sh = mean(sh,mode,cal) ## 小型
    bl = mean(bl,mode,cal)
    bh = mean(bh,mode,cal)
    answer=(1/2*(sh+bh)-1/2*(sl+bl))
    return answer.round(4)    
######分三組
def splithree(df,condition ,limit=False):

    if limit:
        df=df[df[condition]>0]
        df.sort_values(by=condition,ascending=True,inplace=True)
        low=df[condition].iloc[:int(len(df)*0.3)]
        medium=df[condition].iloc[int(len(df)*0.3):int(len(df)*0.7)]
        high=df[condition].iloc[int(len(df)*0.7):]
        low=low.index
        medium=medium.index
        high=high.index
    else:
        df.sort_values(by=condition,ascending=True,inplace=True)
        low=df[condition].iloc[:int(len(df)*0.3)]
        medium=df[condition].iloc[int(len(df)*0.3):int(len(df)*0.7)]
        high=df[condition].iloc[int(len(df)*0.7):]
        low=low.index
        medium=medium.index
        high=high.index
    return low ,medium ,high
#############現金股利率
####此function 獲得 1~30 ~31~70 ~71~100 個別分組報酬率
def threetimestwomean(df,sl ,sm ,sh ,bl ,  bm , bh ,mode,cal):
    sl = df.loc[sl]
    sh = df.loc[sh]
    bl = df.loc[bl]
    bh = df.loc[bh]
    sm = df.loc[sm]
    bm = df.loc[bm]
    sl = mean(sl,mode,cal) ## 小型 小condition
    sm = mean(sm,mode,cal) ## 小型
    sh = mean(sh,mode,cal) ## 小型

    bl = mean(bl,mode,cal)
    bm = mean(bm,mode,cal) ## 
    bh = mean(bh,mode,cal)
    return  sl , sm ,sh,bl , bm,  bh
def gettwo(df,small,high,mode,cal):
    if mode == "連續" :
        small=df.loc[small]
        high=df.loc[high]
        small["加權報酬"]=small["mktcap_k"].sum()
        small["組合占比"]=small["mktcap_k"] / small["加權報酬"]
        smallreturn=(small["組合占比"]*small["ln_roi"]).sum()
    
      
        
        high["加權報酬"]=high["mktcap_k"].sum()
        high["組合占比"]=high["mktcap_k"] / high["加權報酬"]
        highreturn=(high["組合占比"]*high["ln_roi"]).sum()
        
        
        df["加權報酬"]=df["mktcap_k"].sum()
        df["組合占比"]=df["mktcap_k"] / df["加權報酬"]
        dfreturn=( df["組合占比"]*df["ln_roi"]).sum()
        pvreturn=(df["市值比重％"]*df["ln_roi"]).sum()*0.01
    if mode == '不連續' :
        small=df.loc[small]
        high=df.loc[high]
        small["加權報酬"]=small["mktcap_k"].sum()
        small["組合占比"]=small["mktcap_k"] / small["加權報酬"]
        smallreturn=(small["組合占比"]*small["roi"]).sum()

      
        
        high["加權報酬"]=high["mktcap_k"].sum()
        high["組合占比"]=high["mktcap_k"] / high["加權報酬"]
        highreturn=(high["組合占比"]*high["roi"]).sum()
        
        
        df["加權報酬"]=df["mktcap_k"].sum()
        df["組合占比"]=df["mktcap_k"] / df["加權報酬"]
        dfreturn=( df["組合占比"]*df["roi"]).sum()
        pvreturn=(df["市值比重％"]*df["roi"]).sum()*0.01
    if mode == '非日報酬' :
        small=df.loc[small]
        high=df.loc[high]
        small["加權報酬"]=small["mktcap_k"].sum()
        small["組合占比"]=small["mktcap_k"] / small["加權報酬"]
        smallreturn=(small["組合占比"]*small[cal]).sum()

      
        
        high["加權報酬"]=high["mktcap_k"].sum()
        high["組合占比"]=high["mktcap_k"] / high["加權報酬"]
        highreturn=(high["組合占比"]*high[cal]).sum()
        
        
        df["加權報酬"]=df["mktcap_k"].sum()
        df["組合占比"]=df["mktcap_k"] / df["加權報酬"]
        dfreturn=( df["組合占比"]*df[cal]).sum()
        pvreturn=(df["市值比重％"]*df[cal]).sum()*0.01
    return smallreturn,highreturn
##市場投組
def pereturn(df,mode):
    if mode =='連續':
        df=df[df["mktcap_k"]>0]
    
        pv=df.sort_values(by="mktcap_k",ascending=True)
        low=pv["mktcap_k"].iloc[:int(len(pv)*0.5)]
        high=pv["mktcap_k"].iloc[int(len(pv)*0.5):]
    
        low=pv.loc[low.index]
        low["加權報酬"]=low["mktcap_k"].sum()
        low["組合占比"]=low["mktcap_k"] / low["加權報酬"]
        lowreturn=(low["組合占比"]*low["ln_roi"]).sum()
        # lowreturn1=low["報酬率-Ln"].sum()/len(low)
        high=pv.loc[high.index]
        high["加權報酬"]=high["mktcap_k"].sum()
        high["組合占比"]=high["mktcap_k"] / high["加權報酬"]
        highreturn=(high["組合占比"]*high["ln_roi"]).sum()
        
        
        pv["加權報酬"]=pv["mktcap_k"].sum()
        pv["組合占比"]=pv["mktcap_k"] / pv["加權報酬"]
        pvreturn=(pv["市值比重％"]*pv["ln_roi"]).sum()*0.01
    if mode =='不連續':
        df=df[df["mktcap_k"]>0]
    
        pv=df.sort_values(by="mktcap_k",ascending=True)
        low=pv["mktcap_k"].iloc[:int(len(pv)*0.5)]
        high=pv["mktcap_k"].iloc[int(len(pv)*0.5):]
    
        low=pv.loc[low.index]
        low["加權報酬"]=low["mktcap_k"].sum()
        low["組合占比"]=low["mktcap_k"] / low["加權報酬"]
        lowreturn=(low["組合占比"]*low["ln_roi"]).sum()
        # lowreturn1=low["報酬率-Ln"].sum()/len(low)
        high=pv.loc[high.index]
        high["加權報酬"]=high["mktcap_k"].sum()
        high["組合占比"]=high["mktcap_k"] / high["加權報酬"]
        highreturn=(high["組合占比"]*high["ln_roi"]).sum()
        
        
        pv["加權報酬"]=pv["mktcap_k"].sum()
        pv["組合占比"]=pv["mktcap_k"] / pv["加權報酬"]
        pvreturn=(pv["市值比重％"]*pv["ln_roi"]).sum()*0.01

    # highreturn1=high["報酬率-Ln"].sum()/len(high)
    return lowreturn, highreturn ,pvreturn
def famaindex(df,condition):
    
    df[df[condition]>0]
    l,m,h=splithree(df,condition)
    sh,bh=splittwo(df,l)###因為股價淨值比越低越好
    sm,bm=splittwo(df,m)###因為股價淨值比越低越好
    sl,bl=splittwo(df,h)###因為股價淨值比越低越好
    return sl,sm,sh, bl,bm,bh

def famaindex1(df,Financialstatements ,condition):
######取index 所以要使用 531 的分組名單    
    
    l,m,h= fin(Financialstatements,condition)
    sh,bh=splittwo(df,l)###因為股價淨值比越低越好
    sm,bm=splittwo(df,m)###因為股價淨值比越低越好
    sl,bl=splittwo(df,h)###因為股價淨值比越低越好
    return sl,sm,sh, bl,bm,bh
def famathreegroup(std,df):
    sl,sm,sh, bl,bm,bh= famaindex(std,"pbr")
    sl=df.loc[sl]
    sm=df.loc[sm]
    sh=df.loc[sh]
    bl=df.loc[bl]
    bm=df.loc[bm]
    bh=df.loc[bh]
    return  sl ,sm, sh,bl,bm,bh
def famathreeout(std,df,mode,cal):
    sl,sm,sh, bl,bm,bh=famathreegroup(std,df)
   
    sl = mean(sl,mode,cal).round(4) ## 小型 小condition
    sm = mean(sm,mode,cal).round(4) ## 小型
    sh = mean(sh,mode,cal).round(4) ## 小型

    bl = mean(bl,mode,cal).round(4)
    bm = mean(bm,mode,cal).round(4) ## 小型
    bh = mean(bh,mode,cal).round(4) 
    small=1/3*(sl+sm+sh)
    large=1/3*(bl+bm+bh)
    french=small-large
    return french.round(4)

def famafivegroup(std,df,condition):
    sl,sm,sh, bl,bm,bh= famaindex( std , condition)
    sl=df.loc[sl]
    sm=df.loc[sm]
    sh=df.loc[sh]
    bl=df.loc[bl]
    bm=df.loc[bm]
    bh=df.loc[bh]
    return  sl ,sm, sh, bl , bm , bh
def famafivegroup1(std,invest,condition,df):
    sl,sm,sh, bl,bm,bh= famaindex1( std ,invest ,condition)

    sl=df.loc[sl]
    sm=df.loc[sm]
    sh=df.loc[sh]
    bl=df.loc[bl]
    bm=df.loc[bm]
    bh=df.loc[bh]
    return  sl ,sm, sh, bl , bm , bh


# famafivegroup1(famastd,invest_now,str(year),df)
#幫財報寫規則
def fin(data,condition):
    
    data = data[data[condition]>0]
    data.sort_values(condition,ascending=True,inplace=True)
    low=data.iloc[:int(len(data)*0.3)]
    medium=data.iloc[int(len(data)*0.3):int(len(data)*0.7)]
    high=data.iloc[int(len(data)*0.7):]
    low=low.index
    medium=medium.index
    high=high.index   
    return low , medium ,high 
# famafiveout(famastd,df,str(year))
# l,m,h= fin(invest_now,str(year))

def famafiveout(std,investnow,df,condition,mode,cal):
    nwsl,nwsm,nwsh, nwbl,nwbm,nwbh=famafivegroup(std,df,"pbr")
    pesl,pesm,pesh, pebl,pebm,pebh=famafivegroup1(std,investnow,condition ,df   )
    disl,dism,dish, dibl,dibm,dibh=famafivegroup(std,df,"tej_cdiv_yid"    )
    
   
    nwsl = mean(nwsl,mode,cal).round(4) ## 小型 小condition
    nwsm = mean(nwsm,mode,cal).round(4) ## 小型
    nwsh = mean(nwsh,mode,cal).round(4) ## 小型

    nwbl = mean(nwbl,mode,cal).round(4)
    nwbm = mean(nwbm,mode,cal).round(4) ## 小型
    nwbh = mean(nwbh,mode,cal).round(4) 
    
    pesl = mean(pesl,mode,cal).round(4)
    pesm = mean(pesm,mode,cal).round(4)
    pesh = mean(pesh,mode,cal).round(4)
   
    pebl = mean(pebl,mode,cal).round(4)
    pebm = mean(pebm,mode,cal).round(4)
    pebh = mean(pebh,mode,cal).round(4)
    
    disl = mean(disl,mode,cal).round(4)
    dism = mean(dism,mode,cal).round(4)
    dish = mean(dish,mode,cal).round(4)
    
    dibl = mean(dibl,mode,cal).round(4)
    dibm = mean(dibm,mode,cal).round(4)
    dibh = mean(dibh,mode,cal).round(4)
    
    
    small=1/9*(nwsl+nwsm+nwsh+pesl+pesm+pesh+disl+dism+dish)
    large=1/9*(nwbl+nwbm+nwbh+pebl+pebm+pebh+dibl+dibm+dibh)
    french=small-large
    return french.round(4)

# famafiveout(famastd,invest_now,df,str(year))




##### nw  >> 淨值比意思 
##### per >> 益本比
##### di  >> 現金股利率
#####迴圈測試時專用
# dataframe= getdata("2022-04-28")
# dataframe.sort_values('zdate',inplace=True)
# dataframe.set_index("stk_id",inplace=True)
# famalast= dataframe.groupby(['year','month']).nth(1) 
# ###取得年月日
# famamonthstd    = dataframe.groupby(['year','month']).nth(-1)
# famayearstd     = dataframe.groupby(['year','month']).nth(-1)
# famayearstd["month"] =  famayearstd["zdate"].dt.month
# famayearstd = famayearstd[famayearstd["month"]== 5 ]["zdate"]
# famayearstd=famayearstd.reset_index()
# 
# std=famamonthstd['zdate'].reset_index()
# df=famagroup[3][1]
# famastd=famagroup[7][1]
###########分成大小
##此涵式得到所有市場投組 index
##############
def alldata(data,condition,mode):
    if mode == '上市':
        df=data[data["mkt"]==condition]
        df=df.index
    if mode ==  '上市上櫃':
        df=data[data["mkt"].isin(condition)]
        df=df.index
    return df
###########得到所有市場別投組後 再進行分組 
def twotimestwomean(df,sl ,sh, bl , bh ,mode ,cal): ###小型溢酬
    sl = df.loc[sl]
    sh = df.loc[sh]
    bl = df.loc[bl]
    bh = df.loc[bh]
    sl = mean(sl,mode) ## 小型 小condition
    sh = mean(sh,mode) ## 小型
    bl = mean(bl,mode)
    bh = mean(bh,mode)
    answer=(1/2*(sh+bh)-1/2*(sl+bl)) 
    return answer.round(4)   
# 
# def calculate1(df,famastdindex,famastd,year,month,mode,invest_now,profit_now,group):
    market=meanwithindex(df,famastdindex,mode)
    fama=famastd
    fama=fama.loc[famastdindex]
    move0=sh_roi[sh_roi['year']==year]
    month1 = month-1
    if month1 == 0  :
        month1 = 12
    
    move0=move0[move0['month']== month1]
    try :
        move0=move0.loc[famastdindex]
    except KeyError :
        famastdindex1=pd.Series( famastdindex)
    
        for w  in  famastdindex :
           if w  not in move0.index :
               famastdindex1 = famastdindex1[famastdindex1 != w]
        famastdindex1=famastdindex1.to_frame()
        famastdindex1.set_index('stk_id',inplace=True)
        move = famastdindex1.index
        move0 = move0.loc[move]
    
    ###################動能
    move1=momentum[momentum['year']==year]
    move1=move1[move1['month']==month]
    try :
        move1=move1.loc[famastdindex]
    except KeyError :
        famastdindex1=pd.Series( famastdindex)
    
        for k  in  famastdindex :
           if k  not in move1.index :
               
               famastdindex1 = famastdindex1[famastdindex1 != k]
        famastdindex1=famastdindex1.to_frame()
        famastdindex1.set_index('stk_id',inplace=True)
        move = famastdindex1.index
        move1 = move1.loc[move]
    ###############################333
    move2=long[long['year']==year]
    move2=move2[move2['month']==month]
    try :
        move2=move2.loc[famastdindex]
    except KeyError :
        famastdindex1=pd.Series( famastdindex)
    
        for q  in  famastdindex :
           if q  not in move2.index :
               
               famastdindex1 = famastdindex1[famastdindex1 != q]
        famastdindex1=famastdindex1.to_frame()
        famastdindex1.set_index('stk_id',inplace=True)
        move = famastdindex1.index
        move2 = move2.loc[move]
    ####大投組 小投組
    s,b=marketpro(fama)
    
    ########短期動能###動能報酬率專用 條件能為負數
    
     
    smovel,smovem,smoveh =splithree(move0, "短期反轉%",limit=False )
    meanwithindex(df,smovel,mode)
    meanwithindex(df,smovem,mode)
    meanwithindex(df,smoveh,mode)
    smovesl,smovebl = splittwo(df, smovel)
    smovesm,smovebm = splittwo(df, smovem)
    smovesh,smovebh = splittwo(df, smoveh)
    sriskpremium = twotimestwomean(df, smovesl,smovesh , smovebl ,smovebh,mode ,cal  )##
    
    smovesl,smovesm,smovesh ,smovebl ,smovebm ,smovebh =threetimestwomean(df,smovesl,smovesm, smovesl,smovebl,smovebm ,smovebh,mode )
    ### 動能投組  2個月前近一年
    mmovel,mmovem,mmoveh =splithree(move1, "2個月前年報酬率",limit=False )
    meanwithindex(df,mmovel,mode)
    meanwithindex(df,mmovem,mode)
    meanwithindex(df,mmoveh,mode)
    mmovesl,mmovebl = splittwo(df, mmovel)
    mmovesm,mmovebm = splittwo(df, mmovem)
    mmovesh,mmovebh = splittwo(df, mmoveh)
    mriskpremium = twotimestwomean(df, mmovesl,mmovesh , mmovebl ,mmovebh ,mode ,cal )##
    
    mmovesl,mmovesm,mmovesh ,mmovebl ,mmovebm ,mmovebh =threetimestwomean(df,mmovesl,mmovesm, mmovesl,mmovebl,mmovebm ,mmovebh,mode )
    ##########長期反轉投組
    lmovel,lmovem,lmoveh =splithree(move2, "13個月前近3年報酬",limit=False )
    
    meanwithindex(df,lmovel,mode)
    meanwithindex(df,lmovem,mode)
    meanwithindex(df,lmoveh,mode)
    
    lmovesl,lmovebl = splittwo(df, lmovel)
    lmovesm,lmovebm = splittwo(df, lmovem)
    lmovesh,lmovebh = splittwo(df, lmoveh)
    lriskpremium = twotimestwomean(df, lmovesl,lmovesh , lmovebl ,lmovebh ,mode ,cal)##
    
    lmovesl,lmovesm,lmovesh ,lmovebl ,lmovebm ,lmovebh =threetimestwomean(df,lmovesl,lmovesm, lmovesl,lmovebl,lmovebm ,lmovebh,mode ) 
    #交易面
    ####此function 獲得 1~30 ~31~70 ~71~100 個別分組報酬率
    nwl,nwm,nwh=splithree(fama,"pbr",limit=True)
    meanwithindex(df,nwh,mode)
    meanwithindex(df,nwm,mode)
    meanwithindex(df,nwl,mode)
    nwsl,nwbl = splittwo(fama, nwl)
    nwsm,nwbm = splittwo(fama, nwm)
    nwsh,nwbh = splittwo(fama, nwh)
    
    nwriskpremium = twotimestwomean(df,nwsl,nwsh , nwbl ,nwbh ,mode,cal )##
    ##1/2*(小型高淨值市價投組+大型高淨值市價投組)-1/2*(小型低淨值市價投組+大型低淨值市價投組)
    ##依French的定義，由兩個高淨值市價比投組的平均報酬率減兩個低淨值市價比投組的平均報酬率，因此又稱價值型溢酬。
    nwsl,nwsm,nwsh ,nwbl ,nwbm ,nwbh =threetimestwomean(df,nwsh,nwsm, nwsl,nwbh,nwbm ,nwbl,mode )
    
    #### 益本比所以相反
    pel,pem,peh=splithree(fama,"tej_per2",limit=True)
    meanwithindex(df,pel,mode)
    meanwithindex(df,pem,mode)
    meanwithindex(df,peh,mode)
    ##################################
    pesl,pebl = splittwo(fama, pel)###小投組 低本益比 大型 低本益比
    pesm,pebm = splittwo(fama, pem)###小型   中     大型 中
    pesh,pebh = splittwo(fama, peh)## 小型   高     大型 高
    # pesl1,pesh1,pebl1,pebh1 =twotimestwo(famastd,"本益比-TEJ")
    periskpremium = twotimestwomean(df,pesl ,pesh , pebl , pebh,mode,cal )####	
    #1/2*(小型高益本比投組+大型高益本比投組) -1/2*(小型低益本比投組+大型低益本比投組)
    
    pesl , pesm , pesh, pebl ,pebm ,pebh= threetimestwomean(df,pesl,pesm, pesh, pebl , pebm ,pebh,mode )
    ##################
      
    dil,dim,dih=splithree(fama,"tej_cdiv_yid",limit=True)
    disl,dibl = splittwo(fama, dil)
    dism,dibm = splittwo(fama, dim)
    dish,dibh = splittwo(fama, dih)
    meanwithindex(df,dil,mode)
    meanwithindex(df,dim,mode)
    meanwithindex(df,dih,mode)
    # disl1,dish1,dibl1,dibh1 =twotimestwo(famastd,"現金股利率")
    
    diriskpremium = twotimestwomean(df,disl ,dish, dibl , dibh,mode,cal )##
    
    disl,dism,dish ,dibl ,dibm ,dibh =threetimestwomean(df,disl,dism, dish,dibl,dibm ,dibh ,mode)
    
    ###盈利能力 排除0
    
    
    epsl,epsm,epsh=splithree(profit_now,'eps'+str(Fiancialyear),limit=True)    
    meanwithindex(df,epsl,mode)
    meanwithindex(df,epsm,mode)
    meanwithindex(df,epsh,mode)
    epssl,epsbl = splittwo(fama, epsl)
    epssm,epsbm = splittwo(fama, epsm)
    epssh,epsbh = splittwo(fama, epsh)
    epsriskpremium = twotimestwomean(df,epssl ,epssh, epsbl , epsbh ,mode,cal)##
    
    epssl,epssm,epssh ,epsbl ,epsbm ,epsbh =threetimestwomean(df,epssl,epssm, epssh,epsbl,epsbm ,epsbh ,mode)
       
    ###########資產成長
    ## 投資0 排除
    
    inl,inm,inh=splithree(invest_now,'inv'+str(Fiancialyear),limit=True)
    insl,inbl = splittwo(fama, inl)
    insm,inbm = splittwo(fama, inm)
    insh,inbh = splittwo(fama, inh)
    meanwithindex(df,inl,mode)
    meanwithindex(df,inm,mode)
    meanwithindex(df,inh,mode)
    
    invriskpremium = twotimestwomean(df,insl ,insh, inbl , inbh ,mode,cal )##
    insl,insm,insh ,inbl ,inbm ,inbh =threetimestwomean(df,insl,insm, insh, inbl, inbm , inbh ,mode)
       
  
    output=pd.DataFrame(columns=columns,index=range(1))
    output["證券名稱"]=group
    output["年月日"]= df["zdate"][0]
    output["市場風險溢酬"]= meanwithindex(df,famastdindex,mode) - rf["一年定存"][0]/365
    output["無風險利率"] = rf["一年定存"][0]/365
    output["規模溢酬(3因子)"] = famathreeout(fama,df,mode)
    output["規模溢酬(5因子)"] =famafiveout(fama,profit_now,df,'eps'+str(Fiancialyear),mode)
    
    output["淨值市價比溢酬"] = nwriskpremium
    output["益本比溢酬"]    = periskpremium
    output["股利殖利率溢酬"]= diriskpremium
    output["動能因子"] = mriskpremium 
    output["短期反轉因子"] =sriskpremium 
    output["長期反轉因子"] =lriskpremium 
    output["投資因子"] = invriskpremium 
    output["盈利能力因子"] = epsriskpremium
    
    
    output["市場投組"] = meanwithindex(df,famastdindex,mode)
    output["小型投組"]  = meanwithindex(df,s,mode)
    output["大型投組"]  = meanwithindex(df,b,mode)
    output["高淨值市價投組"]  = meanwithindex(df,nwl,mode)
    output["中淨值市價投組"]  = meanwithindex(df,nwm,mode)
    output["低淨值市價投組"]  = meanwithindex(df,nwh,mode)
    output["大型高淨值市價投組"] = nwbh
    output["大型中淨值市價投組"] = nwbm
    output["大型低淨值市價投組"] = nwbl
    output["小型低淨值市價投組"] = nwsl
    output["小型中淨值市價投組"] = nwsm
    output["小型高淨值市價投組"] = nwsh
    output["高股利殖利率投組"] = meanwithindex(df,dih,mode)
    output["中股利殖利率投組"] = meanwithindex(df,dim,mode)
    output["低股利殖利率投組"] = meanwithindex(df,dil,mode)
    output["大型高股利殖利率投組"] = dibh
    output["大型中股利殖利率投組"] = dibm
    output["大型低股利殖利率投組"] = dibl
    output["小型低股利殖利率投組"] = disl
    output["小型中股利殖利率投組"] = dism
    output["小型高股利殖利率投組"] = dish
    output["高益本比投組"] = meanwithindex(df,pel,mode)
    output["中益本比投組"] = meanwithindex(df,pem,mode)
    output["低益本比投組"] = meanwithindex(df,peh,mode)
    output["大型高益本比投組"] = pebl
    output["大型中益本比投組"] = pebm
    output["大型低益本比投組"] = pebh
    output["小型高益本比投組"] = pesl
    output["小型中益本比投組"] = pesm
    output["小型低益本比投組"] = pesh
    output["高短期反轉投組"] = meanwithindex(df,smoveh,mode)
    output["中短期反轉投組"] = meanwithindex(df,smovem,mode)
    output["低短期反轉投組"] = meanwithindex(df,smovel,mode)
    output["大型高短期反轉投組"] = smovebh
    output["大型中短期反轉投組"] = smovebm
    output["大型低短期反轉投組"] = smovebl
    output["小型高短期反轉投組"] = smovesh
    output["小型中短期反轉投組"] = smovesm
    output["小型低短期反轉投組"] = smovesl
    output["大型高短期反轉投組"] = smovebh
    
    output["高動能投組"] = meanwithindex(df,mmoveh,mode)
    output["中動能投組"] = meanwithindex(df,mmovem,mode)
    output["低動能投組"] = meanwithindex(df,mmovel,mode)
    output["大型中動能投組"] = mmovebm
    output["大型低動能投組"] = mmovebl
    output["大型高動能投組"] = mmovebh
    
    output["小型高動能投組"] = mmovesh
    output["小型中動能投組"] = mmovesm
    output["小型低動能投組"] = mmovesl
    output["高長期反轉投組"] = meanwithindex(df,lmoveh,mode)
    output["中長期反轉投組"] = meanwithindex(df,lmovem,mode)
    output["低長期反轉投組"] = meanwithindex(df,lmovel,mode)
    output["大型高長期反轉投組"] = lmovebh
    output["大型中長期反轉投組"] = lmovebm
    output["大型低長期反轉投組"] = lmovebl
    output["小型高長期反轉投組"] = lmovesh
    output["小型中長期反轉投組"] = lmovesm
    output["小型低長期反轉投組"] = lmovesl
    output["大型高長期反轉投組"] = lmovebh
    
    output["高投資投組"] =   meanwithindex(df,inl,mode)
    output["中投資投組"] =   meanwithindex(df,inm,mode)
    output["低投資投組"] =   meanwithindex(df,inh,mode)
    output["大型高投資投組"] = inbh
    output["大型中投資投組"] = inbm
    output["大型低投資投組"] = inbl
    output["小型低投資投組"] = insl
    output["小型中投資投組"] = insm
    output["小型高投資投組"] = insh
     
    output["高盈利能力投組"] =   meanwithindex(df,epsl,mode)
    output["中盈利能力投組"] =   meanwithindex(df,epsm,mode)
    output["低盈利能力投組"] =   meanwithindex(df,epsh,mode)
    
    
    output["大型高盈利能力投組"] = epsbh
    output["大型中盈利能力投組"] = epsbm
    output["大型低盈利能力投組"] = epsbl
    output["小型低盈利能力投組"] = epssl
    output["小型中盈利能力投組"] = epssm
    output["小型高盈利能力投組"] = epssh
    return output
    

def calculate1(df,famastdindex,famastd,year,month,mode,invest_now,profit_now,group,cal):
    market=meanwithindex(df,famastdindex,mode,cal)
    fama=famastd
    fama=fama.loc[famastdindex]
    move0=sh_roi[sh_roi['year']==year]
    month1 = month-1
    if month1 == 0  :
        month1 = 12
    
    move0=move0[move0['month']== month1]
    try :
        move0=move0.loc[famastdindex]
    except KeyError :
        famastdindex1=pd.Series( famastdindex)
    
        for w  in  famastdindex :
           if w  not in move0.index :
               famastdindex1 = famastdindex1[famastdindex1 != w]
        famastdindex1=famastdindex1.to_frame()
        famastdindex1.set_index('stk_id',inplace=True)
        move = famastdindex1.index
        move0 = move0.loc[move]
    
    ###################動能
    move1=momentum[momentum['year']==year]
    move1=move1[move1['month']==month]
    try :
        move1=move1.loc[famastdindex]
    except KeyError :
        famastdindex1=pd.Series( famastdindex)
    
        for k  in  famastdindex :
           if k  not in move1.index :
               
               famastdindex1 = famastdindex1[famastdindex1 != k]
        famastdindex1=famastdindex1.to_frame()
        famastdindex1.set_index('stk_id',inplace=True)
        move = famastdindex1.index
        move1 = move1.loc[move]
    ###############################333
    move2=long[long['year']==year]
    move2=move2[move2['month']==month]
    try :
        move2=move2.loc[famastdindex]
    except KeyError :
        famastdindex1=pd.Series( famastdindex)
    
        for q  in  famastdindex :
           if q  not in move2.index :
               
               famastdindex1 = famastdindex1[famastdindex1 != q]
        famastdindex1=famastdindex1.to_frame()
        famastdindex1.set_index('stk_id',inplace=True)
        move = famastdindex1.index
        move2 = move2.loc[move]
    ####大投組 小投組
    s,b=marketpro(fama)
    
    ########短期動能###動能報酬率專用 條件能為負數
    
     
    smovel,smovem,smoveh =splithree(move0, "短期反轉%",limit=False )
    meanwithindex(df,smovel,mode,cal)
    meanwithindex(df,smovem,mode,cal)
    meanwithindex(df,smoveh,mode,cal)
    smovesl,smovebl = splittwo(df, smovel)
    smovesm,smovebm = splittwo(df, smovem)
    smovesh,smovebh = splittwo(df, smoveh)
    sriskpremium = twotimestwomean(df, smovesl,smovesh , smovebl ,smovebh,mode,cal  )##
    
    smovesl,smovesm,smovesh ,smovebl ,smovebm ,smovebh =threetimestwomean(df,smovesl,smovesm, smovesl,smovebl,smovebm ,smovebh,mode,cal )
    ### 動能投組  2個月前近一年
    mmovel,mmovem,mmoveh =splithree(move1, "2個月前年報酬率",limit=False )
    meanwithindex(df,mmovel,mode,cal)
    meanwithindex(df,mmovem,mode,cal)
    meanwithindex(df,mmoveh,mode,cal)
    mmovesl,mmovebl = splittwo(df, mmovel)
    mmovesm,mmovebm = splittwo(df, mmovem)
    mmovesh,mmovebh = splittwo(df, mmoveh)
    mriskpremium = twotimestwomean(df, mmovesl,mmovesh , mmovebl ,mmovebh ,mode,cal )##
    
    mmovesl,mmovesm,mmovesh ,mmovebl ,mmovebm ,mmovebh =threetimestwomean(df,mmovesl,mmovesm, mmovesl,mmovebl,mmovebm ,mmovebh,mode,cal )
    ##########長期反轉投組
    lmovel,lmovem,lmoveh =splithree(move2, "13個月前近3年報酬",limit=False )
    
    meanwithindex(df,lmovel,mode,cal)
    meanwithindex(df,lmovem,mode,cal)
    meanwithindex(df,lmoveh,mode,cal)
    
    lmovesl,lmovebl = splittwo(df, lmovel)
    lmovesm,lmovebm = splittwo(df, lmovem)
    lmovesh,lmovebh = splittwo(df, lmoveh)
    lriskpremium = twotimestwomean(df, lmovesl,lmovesh , lmovebl ,lmovebh ,mode,cal )##
    
    lmovesl,lmovesm,lmovesh ,lmovebl ,lmovebm ,lmovebh =threetimestwomean(df,lmovesl,lmovesm, lmovesl,lmovebl,lmovebm ,lmovebh,mode,cal ) 
    #交易面
    ####此function 獲得 1~30 ~31~70 ~71~100 個別分組報酬率
    nwl,nwm,nwh=splithree(fama,"pbr",limit=True)
    meanwithindex(df,nwh,mode,cal)
    meanwithindex(df,nwm,mode,cal)
    meanwithindex(df,nwl,mode,cal)
    nwsl,nwbl = splittwo(fama, nwl)
    nwsm,nwbm = splittwo(fama, nwm)
    nwsh,nwbh = splittwo(fama, nwh)
    
    nwriskpremium = twotimestwomean(df,nwsl,nwsh , nwbl ,nwbh ,mode,cal )##
    ##1/2*(小型高淨值市價投組+大型高淨值市價投組)-1/2*(小型低淨值市價投組+大型低淨值市價投組)
    ##依French的定義，由兩個高淨值市價比投組的平均報酬率減兩個低淨值市價比投組的平均報酬率，因此又稱價值型溢酬。
    nwsl,nwsm,nwsh ,nwbl ,nwbm ,nwbh =threetimestwomean(df,nwsh,nwsm, nwsl,nwbh,nwbm ,nwbl,mode,cal )
    
    #### 益本比所以相反
    pel,pem,peh=splithree(fama,"tej_per2",limit=True)
    meanwithindex(df,pel,mode,cal)
    meanwithindex(df,pem,mode,cal)
    meanwithindex(df,peh,mode,cal)
    ##################################
    pesl,pebl = splittwo(fama, pel)###小投組 低本益比 大型 低本益比
    pesm,pebm = splittwo(fama, pem)###小型   中     大型 中
    pesh,pebh = splittwo(fama, peh)## 小型   高     大型 高
    # pesl1,pesh1,pebl1,pebh1 =twotimestwo(famastd,"本益比-TEJ")
    periskpremium = twotimestwomean(df,pesl ,pesh , pebl , pebh,mode,cal )####	
    #1/2*(小型高益本比投組+大型高益本比投組) -1/2*(小型低益本比投組+大型低益本比投組)
    
    pesl , pesm , pesh, pebl ,pebm ,pebh= threetimestwomean(df,pesl,pesm, pesh, pebl , pebm ,pebh,mode,cal )
    ##################
      
    dil,dim,dih=splithree(fama,"tej_cdiv_yid",limit=True)
    disl,dibl = splittwo(fama, dil)
    dism,dibm = splittwo(fama, dim)
    dish,dibh = splittwo(fama, dih)
    meanwithindex(df,dil,mode,cal)
    meanwithindex(df,dim,mode,cal)
    meanwithindex(df,dih,mode,cal)
    # disl1,dish1,dibl1,dibh1 =twotimestwo(famastd,"現金股利率")
    
    diriskpremium = twotimestwomean(df,disl ,dish, dibl , dibh,mode ,cal)##
    
    disl,dism,dish ,dibl ,dibm ,dibh =threetimestwomean(df,disl,dism, dish,dibl,dibm ,dibh ,mode,cal)
    
    ###盈利能力 排除0
    
    
    epsl,epsm,epsh=splithree(profit_now,'eps'+str(Fiancialyear),limit=True)    
    meanwithindex(df,epsl,mode,cal)
    meanwithindex(df,epsm,mode,cal)
    meanwithindex(df,epsh,mode,cal)
    epssl,epsbl = splittwo(fama, epsl)
    epssm,epsbm = splittwo(fama, epsm)
    epssh,epsbh = splittwo(fama, epsh)
    epsriskpremium = twotimestwomean(df,epssl ,epssh, epsbl , epsbh ,mode,cal)##
    
    epssl,epssm,epssh ,epsbl ,epsbm ,epsbh =threetimestwomean(df,epssl,epssm, epssh,epsbl,epsbm ,epsbh ,mode,cal)
       
    ###########資產成長
    ## 投資0 排除
    
    inl,inm,inh=splithree(invest_now,'inv'+str(Fiancialyear),limit=True)
    insl,inbl = splittwo(fama, inl)
    insm,inbm = splittwo(fama, inm)
    insh,inbh = splittwo(fama, inh)
    meanwithindex(df,inl,mode,cal)
    meanwithindex(df,inm,mode,cal)
    meanwithindex(df,inh,mode,cal)
    
    invriskpremium = twotimestwomean(df,insl ,insh, inbl , inbh ,mode,cal )##
    insl,insm,insh ,inbl ,inbm ,inbh =threetimestwomean(df,insl,insm, insh, inbl, inbm , inbh ,mode,cal)
       
  
    output=pd.DataFrame(columns=columns,index=range(1))
    output["證券名稱"]=group
    output["年月日"]= df["zdate"][0]
    output["市場風險溢酬"]= meanwithindex(df,famastdindex,mode,cal) - rate["一年定存"][0]/365
    output["無風險利率"] =rate["一年定存"][0]/365
    output["規模溢酬(3因子)"] = famathreeout(fama,df,mode,cal)
    output["規模溢酬(5因子)"] =famafiveout(fama,profit_now,df,'eps'+str(Fiancialyear),mode,cal)
    
    output["淨值市價比溢酬"] = nwriskpremium
    output["益本比溢酬"]    = periskpremium
    output["股利殖利率溢酬"]= diriskpremium
    output["動能因子"] = mriskpremium 
    output["短期反轉因子"] =sriskpremium 
    output["長期反轉因子"] =lriskpremium 
    output["投資因子"] = invriskpremium 
    output["盈利能力因子"] = epsriskpremium
    
    
    output["市場投組"] = meanwithindex(df,famastdindex,mode,cal)
    output["小型投組"]  = meanwithindex(df,s,mode,cal)
    output["大型投組"]  = meanwithindex(df,b,mode,cal)
    output["高淨值市價投組"]  = meanwithindex(df,nwl,mode,cal)
    output["中淨值市價投組"]  = meanwithindex(df,nwm,mode,cal)
    output["低淨值市價投組"]  = meanwithindex(df,nwh,mode,cal)
    output["大型高淨值市價投組"] = nwbh
    output["大型中淨值市價投組"] = nwbm
    output["大型低淨值市價投組"] = nwbl
    output["小型低淨值市價投組"] = nwsl
    output["小型中淨值市價投組"] = nwsm
    output["小型高淨值市價投組"] = nwsh
    output["高股利殖利率投組"] = meanwithindex(df,dih,mode,cal)
    output["中股利殖利率投組"] = meanwithindex(df,dim,mode,cal)
    output["低股利殖利率投組"] = meanwithindex(df,dil,mode,cal)
    output["大型高股利殖利率投組"] = dibh
    output["大型中股利殖利率投組"] = dibm
    output["大型低股利殖利率投組"] = dibl
    output["小型低股利殖利率投組"] = disl
    output["小型中股利殖利率投組"] = dism
    output["小型高股利殖利率投組"] = dish
    output["高益本比投組"] = meanwithindex(df,pel,mode,cal)
    output["中益本比投組"] = meanwithindex(df,pem,mode,cal)
    output["低益本比投組"] = meanwithindex(df,peh,mode,cal)
    output["大型高益本比投組"] = pebl
    output["大型中益本比投組"] = pebm
    output["大型低益本比投組"] = pebh
    output["小型高益本比投組"] = pesl
    output["小型中益本比投組"] = pesm
    output["小型低益本比投組"] = pesh
    output["高短期反轉投組"] = meanwithindex(df,smoveh,mode,cal)
    output["中短期反轉投組"] = meanwithindex(df,smovem,mode,cal)
    output["低短期反轉投組"] = meanwithindex(df,smovel,mode,cal)
    output["大型高短期反轉投組"] = smovebh
    output["大型中短期反轉投組"] = smovebm
    output["大型低短期反轉投組"] = smovebl
    output["小型高短期反轉投組"] = smovesh
    output["小型中短期反轉投組"] = smovesm
    output["小型低短期反轉投組"] = smovesl
    output["大型高短期反轉投組"] = smovebh
    
    output["高動能投組"] = meanwithindex(df,mmoveh,mode,cal)
    output["中動能投組"] = meanwithindex(df,mmovem,mode,cal)
    output["低動能投組"] = meanwithindex(df,mmovel,mode,cal)
    output["大型中動能投組"] = mmovebm
    output["大型低動能投組"] = mmovebl
    output["大型高動能投組"] = mmovebh
    
    output["小型高動能投組"] = mmovesh
    output["小型中動能投組"] = mmovesm
    output["小型低動能投組"] = mmovesl
    output["高長期反轉投組"] = meanwithindex(df,lmoveh,mode,cal)
    output["中長期反轉投組"] = meanwithindex(df,lmovem,mode,cal)
    output["低長期反轉投組"] = meanwithindex(df,lmovel,mode,cal)
    output["大型高長期反轉投組"] = lmovebh
    output["大型中長期反轉投組"] = lmovebm
    output["大型低長期反轉投組"] = lmovebl
    output["小型高長期反轉投組"] = lmovesh
    output["小型中長期反轉投組"] = lmovesm
    output["小型低長期反轉投組"] = lmovesl
    output["大型高長期反轉投組"] = lmovebh
    
    output["高投資投組"] =   meanwithindex(df,inl,mode,cal)
    output["中投資投組"] =   meanwithindex(df,inm,mode,cal)
    output["低投資投組"] =   meanwithindex(df,inh,mode,cal)
    output["大型高投資投組"] = inbh
    output["大型中投資投組"] = inbm
    output["大型低投資投組"] = inbl
    output["小型低投資投組"] = insl
    output["小型中投資投組"] = insm
    output["小型高投資投組"] = insh
     
    output["高盈利能力投組"] =   meanwithindex(df,epsl,mode,cal)
    output["中盈利能力投組"] =   meanwithindex(df,epsm,mode,cal)
    output["低盈利能力投組"] =   meanwithindex(df,epsh,mode,cal)
    
    
    output["大型高盈利能力投組"] = epsbh
    output["大型中盈利能力投組"] = epsbm
    output["大型低盈利能力投組"] = epsbl
    output["小型低盈利能力投組"] = epssl
    output["小型中盈利能力投組"] = epssm
    output["小型高盈利能力投組"] = epssh
    return output
    






# def calculate(df,famastdindex,famastd,year,month,mode,invest_now,profit_now,group,time):
    
#     if time == "week":
#         if df
#         output = calculate1(df,famastdindex,famastd,year,month,mode,invest_now,profit_now,group,cal)  
#     if time == "month":
#         output=calculate1(df,famastdindex,famastd,year,month,mode,invest_now,profit_now,group)   
#     if time == "year":
#         output = calculate1(df,famastdindex,famastd,year,month,mode,invest_now,profit_now,group)  
            
        
#         return output 

    

##################3
#Y8888  ##上市不含金融
#Y8888L ##上市不含金融 (連續報酬)
#Y9999#   上市
#Y9999L#  上市 (連續)
#Z8888    上市上櫃(不含金融)
#Z8888L   上市上櫃(不含金融)
#Z9999    上市上櫃
#Z9999    上市上櫃
sh_roi , momentum , long =getMomentum(20210101,20221231)
rate=rf(str(today))
invest_factor,profit_factor =Financialstatements(famayear,famayear)

famastd = getfamastd(str(timeindex))



   
Fiancialyear=str(famayear)
# profit_now=profit_factor["eps"+Fiancialyear]
# invest_now=invest_factor['inv'+Fiancialyear]
   
# weektime =getendweek(today)
# monthtime = getendmonth(today)    
# seasontime = getendquarter(today)
# yeartime = getendyear(today)   
getday=today-relativedelta(months=1)
time_range=getdate(getday)
twoday=time_range['zdate'].iloc[-2]
dataframe= getdata(str(twoday))
data=getweekyear(dataframe, str(year)+'-01-01')

famagroup=dataframe.groupby("zdate")
famagroup=list(famagroup)


###　抓取兩天就能判斷
##分類
groups=['Y8888','Y8888L','Y9999','Y9999L','Z8888','Z8888L','Z9999','Z9999L']
famastdindex=famastd.index





def getday (df):
    fama1=[]
    for group in groups:
        df=famagroup[1][1]
        if group in ('Y8888','Y8888L'):
            famastdindex = alldata(famastd,"TSE",'上市')
            # famastd= famastd.loc[famastdindex]
            try:        
                df=dfinput.loc[famastdindex]
            except KeyError :
                famastdindex1=pd.Series( famastdindex)
                for j  in  famastdindex :
                    if j  not in  df.index  :
                        famastdindex1= famastdindex1[famastdindex1 != j]
                famastdindex=famastdindex1.to_frame()
                famastdindex.set_index('stk_id',inplace=True)
                famastdindex =famastdindex.index 
                df = df.loc[famastdindex]
            try :
                y8888=non_fin(df)
            except KeyError:
                y8888=df.index
                for w  in  M2800   :
                    if w  in y8888 :
                        y8888 = y8888[y8888 != w]
                profit_now=profit_factor["eps"+Fiancialyear]
                invest_now=invest_factor['inv'+Fiancialyear]
                try : 
                    profit_now=profit_now.loc[y8888]
                except KeyError:
                    y88881=pd.Series(y8888)
                    for j  in  y8888 :
                        if j  not in  profit_now.index  :
                            y88881=  y88881[y88881 != j]
                    profit_now=profit_now.loc[y88881]
                profit_now=pd.DataFrame(profit_now)
                try : 
                    invest_now=invest_now.loc[y8888]
                except KeyError:
                    y88881=pd.Series(y8888)
                    for j  in  y8888 :
                        if j  not in  profit_now.index  :
                            y88881=  y88881[y88881 != j]
                    invest_now=invest_now.loc[y88881]
                invest_now=pd.DataFrame(invest_now) 
            if  group == 'Y8888':
                Y8888 = calculate1(df,y8888,famastd,year,month,"不連續",invest_now,profit_now,group,cal=None)
            if  group =='Y8888L':
                Y8888L = calculate1(df,y8888,famastd,year,month,"連續",invest_now,profit_now,group,"cal")
        if group in ('Y9999','Y9999L')  :  
            famastdindex = alldata(famastd,"TSE",'上市')
            try:        
                df=df.loc[famastdindex]
            except KeyError :
                famastdindex1=pd.Series(famastdindex)
                for j  in  famastdindex :
                    if j  not in  df.index  :
                        famastdindex1= famastdindex1[famastdindex1 != j]
                famastdindex=famastdindex1.to_frame()
                famastdindex.set_index('stk_id',inplace=True)
                famastdindex=famastdindex.index
                df = df.loc[famastdindex]
         
                ########需要考慮財報延期! 
                
                profit_now=profit_factor["eps"+Fiancialyear]
                invest_now=invest_factor['inv'+Fiancialyear]
                try : 
                    profit_now=profit_now.loc[famastdindex]
                except KeyError:
                    famastdindex1=pd.Series(famastdindex)
                    for j  in  famastdindex :
                        if j  not in  profit_now.index  :
                            famastdindex1=  famastdindex1[famastdindex1 != j]
                    profit_now=profit_now.loc[famastdindex1]
                profit_now=pd.DataFrame(profit_now)
                try : 
                    invest_now=invest_now.loc[famastdindex]
                except KeyError:
                    famastdindex1=pd.Series(y8888)
                    for j  in  famastdindex :
                        if j  not in  profit_now.index  :
                            famastdindex1=  famastdindex1[famastdindex1 != j]
                    invest_now=invest_now.loc[famastdindex1]
               
                profit_now=pd.DataFrame(profit_now)
                invest_now=pd.DataFrame(invest_now)
            if  group == 'Y9999':
                Y9999= calculate1(df,famastdindex,famastd,year,month,"不連續",invest_now,profit_now,group,cal=None)
            if  group == 'Y9999L':
                Y9999L= calculate1(df,famastdindex,famastd,year,month,"連續",invest_now,profit_now,group,cal=None)

        if group in ('Z8888','Z8888L'):
            famastdindex = alldata(famastd,["TSE","OTC"],'上市上櫃')
            try:        
                df=df.loc[famastdindex]
            except KeyError :
                famastdindex1=pd.Series( famastdindex)
                for j  in  famastdindex :
                    if j  not in  df.index :
                        famastdindex1= famastdindex1[famastdindex1 != j]
                famastdindex1=famastdindex1.to_frame()
                famastdindex1.set_index('stk_id',inplace=True)
                famastdindex =famastdindex1.index 
                df = df.loc[famastdindex]
            try :
                z8888=non_fin(df)
            except KeyError:
                z8888=df.index
                for w  in  M2800   :
                    if w  in z8888 :
                        z8888 = z8888[z8888 != w]
                profit_now=profit_factor["eps"+Fiancialyear]
                invest_now=invest_factor['inv'+Fiancialyear]
                try : 
                    profit_now=profit_now.loc[z8888]
                except KeyError:
                    famastdindex1=pd.Series(z8888)
                    for j  in  famastdindex :
                        if j  not in  profit_now.index  :
                            famastdindex1=  famastdindex1[famastdindex1 != j]
                    profit_now=profit_now.loc[famastdindex1]
                profit_now=pd.DataFrame(profit_now)
                try : 
                    invest_now=invest_now.loc[z8888]
                except KeyError:
                    famastdindex1=pd.Series(z8888)
                    for j  in  famastdindex :
                        if j  not in  profit_now.index  :
                            famastdindex1=  famastdindex1[famastdindex1 != j]
                    invest_now=invest_now.loc[famastdindex1]
                profit_now=pd.DataFrame(profit_now)
                invest_now=pd.DataFrame(invest_now) 
            if  group == 'Z8888':
                Z8888 = calculate1(df,z8888,famastd,year,month,"不連續",invest_now,profit_now,group,cal=None)
            if  group =='Z8888L':
                Z8888L = calculate1(df,z8888,famastd,year,month,"連續",invest_now,profit_now,group,cal=None)

        if group in ('Z9999','Z9999L')  :  
            famastdindex = alldata(famastd,["TSE","OTC"],'上市上櫃')
            try:        
                df=df.loc[famastdindex]
            except KeyError :
                famastdindex1=pd.Series(famastdindex)
                for j  in  famastdindex :
                    if j  not in  df.index  :
                        famastdindex1= famastdindex1[famastdindex1 != j]
                famastdindex=famastdindex1.to_frame()
                famastdindex.set_index('stk_id',inplace=True)
                famastdindex = famastdindex.index
                df = df.loc[ famastdindex]
                profit_now=profit_factor["eps"+Fiancialyear]
                invest_now=invest_factor['inv'+Fiancialyear]
                try : 
                    profit_now=profit_now.loc[famastdindex]
                except KeyError:
                    famastdindex1=pd.Series(famastdindex)
                    for j  in  famastdindex :
                        if j  not in  profit_now.index  :
                            famastdindex1=  famastdindex1[famastdindex1 != j]
                    profit_now=profit_now.loc[famastdindex1]
                profit_now=pd.DataFrame(profit_now)
                try : 
                    invest_now=invest_now.loc[famastdindex]
                except KeyError:
                    famastdindex1=pd.Series(y9999)
                    for j  in  famastdindex :
                        if j  not in  profit_now.index  :
                            famastdindex1=  famastdindex1[famastdindex1 != j]
                    invest_now=invest_now.loc[famastdindex1]
                profit_now=pd.DataFrame(profit_now)
                invest_now=pd.DataFrame(invest_now) 
            if  group == 'Z9999':
                Z9999= calculate1(df,famastdindex,famastd,year,month,"不連續",invest_now,profit_now,group,None)
            if  group == 'Z9999L':
                Z9999L= calculate1(df,famastdindex,famastd,year,month,"連續",invest_now,profit_now,group,None)
    out= pd.concat([Y8888,Y8888L,Y9999,Y9999L,Z8888,Z8888L,Z9999,Z9999L],axis=0)
    fama1.append(out)
    return fama1
    









def famaday(dataframe,today):
    df=famagroup[1][1]
    year = df["year"][0]
    season =df['season'][0]
    month =df['month'][0]
    week = df['week'][0]
    
    uniqueweek=dataframe['week'].unique()
    if len(uniqueweek)==2 :
        
        
            
        
        
    uniquemonth=dataframe['month'].unique()
    uniqueseason=dataframe['season'].unique()
    uniqueyear=dataframe['year'].unique()
    
    ####Y8888  ##上市不含金融
    #Y8888L ##上市不含金融 (連續報酬)
    #Y9999#   上市
    #Y9999L#  上市 (連續)
    #Z8888    上市上櫃(不含金融)
    #Z8888L   上市上櫃(不含金融)
    #Z9999    上市上櫃
    #Z9999    上市上櫃

    fama1=[]
    for group in groups:
        df=famagroup[1][1]
        if group in ('Y8888','Y8888L'):
            famastdindex = alldata(famastd,"TSE",'上市')
            # famastd= famastd.loc[famastdindex]
            try:        
                df=dfinput.loc[famastdindex]
            except KeyError :
                famastdindex1=pd.Series( famastdindex)
                for j  in  famastdindex :
                    if j  not in  df.index  :
                        famastdindex1= famastdindex1[famastdindex1 != j]
                famastdindex=famastdindex1.to_frame()
                famastdindex.set_index('stk_id',inplace=True)
                famastdindex =famastdindex.index 
                df = df.loc[famastdindex]
            try :
                y8888=non_fin(df)
            except KeyError:
                y8888=df.index
                for w  in  M2800   :
                    if w  in y8888 :
                        y8888 = y8888[y8888 != w]
                profit_now=profit_factor["eps"+Fiancialyear]
                invest_now=invest_factor['inv'+Fiancialyear]
                try : 
                    profit_now=profit_now.loc[y8888]
                except KeyError:
                    y88881=pd.Series(y8888)
                    for j  in  y8888 :
                        if j  not in  profit_now.index  :
                            y88881=  y88881[y88881 != j]
                    profit_now=profit_now.loc[y88881]
                profit_now=pd.DataFrame(profit_now)
                try : 
                    invest_now=invest_now.loc[y8888]
                except KeyError:
                    y88881=pd.Series(y8888)
                    for j  in  y8888 :
                        if j  not in  profit_now.index  :
                            y88881=  y88881[y88881 != j]
                    invest_now=invest_now.loc[y88881]
                invest_now=pd.DataFrame(invest_now) 
            if  group == 'Y8888':
                Y8888 = calculate1(df,y8888,famastd,year,month,"不連續",invest_now,profit_now,group,cal=None)
            if  group =='Y8888L':
                Y8888L = calculate1(df,y8888,famastd,year,month,"連續",invest_now,profit_now,group,"cal")
        if group in ('Y9999','Y9999L')  :  
            famastdindex = alldata(famastd,"TSE",'上市')
            try:        
                df=df.loc[famastdindex]
            except KeyError :
                famastdindex1=pd.Series(famastdindex)
                for j  in  famastdindex :
                    if j  not in  df.index  :
                        famastdindex1= famastdindex1[famastdindex1 != j]
                famastdindex=famastdindex1.to_frame()
                famastdindex.set_index('stk_id',inplace=True)
                famastdindex=famastdindex.index
                df = df.loc[famastdindex]
         
                ########需要考慮財報延期! 
                
                profit_now=profit_factor["eps"+Fiancialyear]
                invest_now=invest_factor['inv'+Fiancialyear]
                try : 
                    profit_now=profit_now.loc[famastdindex]
                except KeyError:
                    famastdindex1=pd.Series(famastdindex)
                    for j  in  famastdindex :
                        if j  not in  profit_now.index  :
                            famastdindex1=  famastdindex1[famastdindex1 != j]
                    profit_now=profit_now.loc[famastdindex1]
                profit_now=pd.DataFrame(profit_now)
                try : 
                    invest_now=invest_now.loc[famastdindex]
                except KeyError:
                    famastdindex1=pd.Series(y8888)
                    for j  in  famastdindex :
                        if j  not in  profit_now.index  :
                            famastdindex1=  famastdindex1[famastdindex1 != j]
                    invest_now=invest_now.loc[famastdindex1]
               
                profit_now=pd.DataFrame(profit_now)
                invest_now=pd.DataFrame(invest_now)
            if  group == 'Y9999':
                Y9999= calculate1(df,famastdindex,famastd,year,month,"不連續",invest_now,profit_now,group,cal=None)
            if  group == 'Y9999L':
                Y9999L= calculate1(df,famastdindex,famastd,year,month,"連續",invest_now,profit_now,group,cal=None)

        if group in ('Z8888','Z8888L'):
            famastdindex = alldata(famastd,["TSE","OTC"],'上市上櫃')
            try:        
                df=df.loc[famastdindex]
            except KeyError :
                famastdindex1=pd.Series( famastdindex)
                for j  in  famastdindex :
                    if j  not in  df.index :
                        famastdindex1= famastdindex1[famastdindex1 != j]
                famastdindex1=famastdindex1.to_frame()
                famastdindex1.set_index('stk_id',inplace=True)
                famastdindex =famastdindex1.index 
                df = df.loc[famastdindex]
            try :
                z8888=non_fin(df)
            except KeyError:
                z8888=df.index
                for w  in  M2800   :
                    if w  in z8888 :
                        z8888 = z8888[z8888 != w]
                profit_now=profit_factor["eps"+Fiancialyear]
                invest_now=invest_factor['inv'+Fiancialyear]
                try : 
                    profit_now=profit_now.loc[z8888]
                except KeyError:
                    famastdindex1=pd.Series(z8888)
                    for j  in  famastdindex :
                        if j  not in  profit_now.index  :
                            famastdindex1=  famastdindex1[famastdindex1 != j]
                    profit_now=profit_now.loc[famastdindex1]
                profit_now=pd.DataFrame(profit_now)
                try : 
                    invest_now=invest_now.loc[z8888]
                except KeyError:
                    famastdindex1=pd.Series(z8888)
                    for j  in  famastdindex :
                        if j  not in  profit_now.index  :
                            famastdindex1=  famastdindex1[famastdindex1 != j]
                    invest_now=invest_now.loc[famastdindex1]
                profit_now=pd.DataFrame(profit_now)
                invest_now=pd.DataFrame(invest_now) 
            if  group == 'Z8888':
                Z8888 = calculate1(df,z8888,famastd,year,month,"不連續",invest_now,profit_now,group,cal=None)
            if  group =='Z8888L':
                Z8888L = calculate1(df,z8888,famastd,year,month,"連續",invest_now,profit_now,group,cal=None)

        if group in ('Z9999','Z9999L')  :  
            famastdindex = alldata(famastd,["TSE","OTC"],'上市上櫃')
            try:        
                df=df.loc[famastdindex]
            except KeyError :
                famastdindex1=pd.Series(famastdindex)
                for j  in  famastdindex :
                    if j  not in  df.index  :
                        famastdindex1= famastdindex1[famastdindex1 != j]
                famastdindex=famastdindex1.to_frame()
                famastdindex.set_index('stk_id',inplace=True)
                famastdindex = famastdindex.index
                df = df.loc[ famastdindex]
                profit_now=profit_factor["eps"+Fiancialyear]
                invest_now=invest_factor['inv'+Fiancialyear]
                try : 
                    profit_now=profit_now.loc[famastdindex]
                except KeyError:
                    famastdindex1=pd.Series(famastdindex)
                    for j  in  famastdindex :
                        if j  not in  profit_now.index  :
                            famastdindex1=  famastdindex1[famastdindex1 != j]
                    profit_now=profit_now.loc[famastdindex1]
                profit_now=pd.DataFrame(profit_now)
                try : 
                    invest_now=invest_now.loc[famastdindex]
                except KeyError:
                    famastdindex1=pd.Series(y9999)
                    for j  in  famastdindex :
                        if j  not in  profit_now.index  :
                            famastdindex1=  famastdindex1[famastdindex1 != j]
                    invest_now=invest_now.loc[famastdindex1]
                profit_now=pd.DataFrame(profit_now)
                invest_now=pd.DataFrame(invest_now) 
            if  group == 'Z9999':
                Z9999= calculate1(df,famastdindex,famastd,year,month,"不連續",invest_now,profit_now,group,None)
            if  group == 'Z9999L':
                Z9999L= calculate1(df,famastdindex,famastd,year,month,"連續",invest_now,profit_now,group,None)
    out= pd.concat([Y8888,Y8888L,Y9999,Y9999L,Z8888,Z8888L,Z9999,Z9999L],axis=0)
    fama1.append(out)



famagroup=dataframe.groupby("zdate")
famagroup=list(famagroup)


fama=[]
for i in famagroup:
    
    
    
    
    
    
    
    df=i[1]
    year = df["year"][0]
    season =df['season'][0]
    month =df['month'][0]
    week = df['week'][0]
    
    start = time.time()

    print("The time used to execute this is given below")


    ####Y8888  ##上市不含金融
    #Y8888L ##上市不含金融 (連續報酬)
    #Y9999#   上市
    #Y9999L#  上市 (連續)
    #Z8888    上市上櫃(不含金融)
    #Z8888L   上市上櫃(不含金融)
    #Z9999    上市上櫃
    #Z9999    上市上櫃

    fama1=[]
    for group in groups:
        df=i[1]
        if group in ('Y8888','Y8888L'):
            famastdindex = alldata(famastd,"TSE",'上市')
            # famastd= famastd.loc[famastdindex]
            try:        
                df=df.loc[famastdindex]
            except KeyError :
                famastdindex1=pd.Series( famastdindex)
                for j  in  famastdindex :
                    if j  not in  df.index  :
                        famastdindex1= famastdindex1[famastdindex1 != j]
                famastdindex=famastdindex1.to_frame()
                famastdindex.set_index('stk_id',inplace=True)
                famastdindex =famastdindex.index 
                df = df.loc[famastdindex]
            try :
                y8888=non_fin(df)
            except KeyError:
                y8888=df.index
                for w  in  M2800   :
                    if w  in y8888 :
                        y8888 = y8888[y8888 != w]
            if  group == 'Y8888':
                profit_now=profit_factor["eps"+Fiancialyear]
                invest_now=invest_factor['inv'+Fiancialyear]
                try : 
                    profit_now=profit_now.loc[y8888]
                except KeyError:
                    y88881=pd.Series(y8888)
                    for j  in  y8888 :
                        if j  not in  profit_now.index  :
                            y88881=  y88881[y88881 != j]
                    profit_now=profit_now.loc[y88881]
                profit_now=pd.DataFrame(profit_now)
                try : 
                    invest_now=invest_now.loc[y8888]
                except KeyError:
                    y88881=pd.Series(y8888)
                    for j  in  y8888 :
                        if j  not in  profit_now.index  :
                            y88881=  y88881[y88881 != j]
                    invest_now=invest_now.loc[y88881]
                invest_now=invest_now.loc[y88881]
                invest_now=pd.DataFrame(invest_now) 
                Y8888 = calculate1(df,y8888,famastd,year,month,"不連續",invest_now,profit_now,group,cal=None)
            if  group =='Y8888L':
                profit_now=profit_factor["eps"+Fiancialyear]
                invest_now=invest_factor['inv'+Fiancialyear]
                try : 
                    profit_now=profit_now.loc[y8888]
                except KeyError:
                    y88881=pd.Series(y8888)
                    for j  in  y8888 :
                        if j  not in  profit_now.index  :
                            y88881=  y88881[y88881 != j]
                    profit_now=profit_now.loc[y88881]
                profit_now=pd.DataFrame(profit_now)
                try : 
                    invest_now=invest_now.loc[y8888]
                except KeyError:
                    y88881=pd.Series(y8888)
                    for j  in  y8888 :
                        if j  not in  profit_now.index  :
                            y88881=  y88881[y88881 != j]
                    invest_now=invest_now.loc[y88881]
                invest_now=invest_now.loc[y88881]
                invest_now=pd.DataFrame(invest_now) 
                Y8888L = calculate1(df,y8888,famastd,year,month,"連續",invest_now,profit_now,group,"cal")

        if group in ('Y9999','Y9999L')  :  
            famastdindex = alldata(famastd,"TSE",'上市')
            try:        
                df=df.loc[famastdindex]
            except KeyError :
                famastdindex1=pd.Series(famastdindex)
                for j  in  famastdindex :
                    if j  not in  df.index  :
                        famastdindex1= famastdindex1[famastdindex1 != j]
                famastdindex=famastdindex1.to_frame()
                famastdindex.set_index('stk_id',inplace=True)
                df = df.loc[famastdindex]
            if  group == 'Y9999':
                profit_now=profit_factor["eps"+Fiancialyear]
                invest_now=invest_factor['inv'+Fiancialyear]
                profit_now=profit_now.loc[famastdindex]
                profit_now=pd.DataFrame(profit_now)
                invest_now=invest_now.loc[famastdindex]
                invest_now=pd.DataFrame(invest_now) 
                Y9999= calculate1(df,famastdindex,famastd,year,month,"不連續",invest_now,profit_now,group,None)
            if  group == 'Y9999L':
                profit_now=profit_factor["eps"+Fiancialyear]
                invest_now=invest_factor['inv'+Fiancialyear]
                profit_now=profit_now.loc[famastdindex]
                profit_now=pd.DataFrame(profit_now)
                invest_now=invest_now.loc[famastdindex]
                invest_now=pd.DataFrame(invest_now) 
                Y9999L= calculate1(df,famastdindex,famastd,year,month,"連續",invest_now,profit_now,group,None)

        if group in ('Z8888','Z8888L'):
            famastdindex = alldata(famastd,["TSE","OTC"],'上市上櫃')
            try:        
                df=df.loc[famastdindex]
            except KeyError :
                famastdindex1=pd.Series( famastdindex)
                for j  in  famastdindex :
                    if j  not in  df.index :
                        famastdindex1= famastdindex1[famastdindex1 != j]
                famastdindex1=famastdindex1.to_frame()
                famastdindex1.set_index('stk_id',inplace=True)
                famastdindex =famastdindex1.index 
                df = df.loc[famastdindex]
            try :
                z8888=non_fin(df)
            except KeyError:
                z8888=df.index
                for w  in  M2800   :
                    if w  in z8888 :
                        z8888 = z8888[z8888 != w]
            if  group == 'Z8888':
                profit_now=profit_factor["eps"+Fiancialyear]
                invest_now=invest_factor['inv'+Fiancialyear]
                profit_now=profit_now.loc[z8888]
                profit_now=pd.DataFrame(profit_now)
                invest_now=invest_now.loc[z8888]
                invest_now=pd.DataFrame(invest_now) 
                Z8888 = calculate1(df,z8888,famastd,year,month,"不連續",invest_now,profit_now,group,None)
            if  group =='Z8888L':
                profit_now=profit_factor["eps"+Fiancialyear]
                invest_now=invest_factor['inv'+Fiancialyear]
                profit_now=profit_now.loc[y8888]
                profit_now=pd.DataFrame(profit_now)
                invest_now=invest_now.loc[z8888]
                invest_now=pd.DataFrame(invest_now) 
                Z8888L = calculate1(df,z8888,famastd,year,month,"連續",invest_now,profit_now,group,None)

        if group in ('Z9999','Z9999L')  :  
            famastdindex = alldata(famastd,["TSE","OTC"],'上市上櫃')
            try:        
                df=df.loc[famastdindex]
            except KeyError :
                famastdindex1=pd.Series(famastdindex)
                for j  in  famastdindex :
                    if j  not in  df.index  :
                        famastdindex1= famastdindex1[famastdindex1 != j]
                famastdindex=famastdindex1.to_frame()
                famastdindex.set_index('stk_id',inplace=True)
                famastdindex = famastdindex.index
                df = df.loc[ famastdindex]
            if  group == 'Z9999':
                profit_now=profit_factor["eps"+Fiancialyear]
                invest_now=invest_factor['inv'+Fiancialyear]
                profit_now=profit_now.loc[famastdindex]
                profit_now=pd.DataFrame(profit_now)
                invest_now=invest_now.loc[famastdindex]
                invest_now=pd.DataFrame(invest_now) 
                Z9999= calculate1(df,famastdindex,famastd,year,month,"不連續",invest_now,profit_now,group,None)
            if  group == 'Z9999L':
                profit_now=profit_factor["eps"+Fiancialyear]
                invest_now=invest_factor['inv'+Fiancialyear]
                profit_now=profit_now.loc[famastdindex]
                profit_now=pd.DataFrame(profit_now)
                invest_now=invest_now.loc[famastdindex]
                invest_now=pd.DataFrame(invest_now) 
                Z9999L= calculate1(df,famastdindex,famastd,year,month,"連續",invest_now,profit_now,group,None)
    out= pd.concat([Y8888,Y8888L,Y9999,Y9999L,Z8888,Z8888L,Z9999,Z9999L],axis=0)
    fama1.append(out)
    print("完成啦 沒錯喔!") 
    end = time.time()
    print(end - start)   
     
    fama.append(fama1)
    
    
    
###########################################################################跑回圈換組用    
    #######要把刪掉的樣本加回來 檢驗樣本 可行性
    # if df["zdate"][0] ==  famayearstd[ famayearstd['ye ar']==year]['zdate'].values:
    #     famastd = df
    #     famastdindex = alldata(famastd,["TSE","OTC"],'上市上櫃')
    #     famastd=famastd.loc[famastdindex]
    #     Financialyear = str(year)

    #     profit_now=profit_factor["eps"+Financialyear]
    #     profit_now=profit_now.loc[famastdindex]
    #     profit_now=pd.DataFrame(profit_now) 
    #     invest_now=invest_factor['inv'+Financialyear]
    #     invest_now=invest_now.loc[famastdindex]
    #     invest_now=pd.DataFrame(invest_now)  
#     if df["zdate"][0] == std[(std['year']==year) &(std['month']==month) ]["zdate"].values:
#         famamovestd = df   
# # except KeyError:
# #  pass


#     ##短期報酬
   
